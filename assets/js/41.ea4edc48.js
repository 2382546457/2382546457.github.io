(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{366:function(a,s,t){"use strict";t.r(s);var n=t(7),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-什么是cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是cas"}},[a._v("#")]),a._v(" 1. 什么是CAS")]),a._v(" "),s("p",[a._v("CAS，全称 Compare and Swap，是实现并发算法时常用到的一种技术。")]),a._v(" "),s("p",[a._v("它包含了三个操作数：")]),a._v(" "),s("ul",[s("li",[a._v("内存位置")]),a._v(" "),s("li",[a._v("预期原值")]),a._v(" "),s("li",[a._v("更新值")])]),a._v(" "),s("p",[a._v("也就是 ：比较内存中的值跟预期的旧值是否相同，如果相同就交换，不同就不交换。")]),a._v(" "),s("p",[a._v("使用C艹来实现就是这样的：")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("bool compareAndSwap(int* address, int oldValue, int newValue) {\n    if (*address == oldValue) {\n        *address = newValue;\n    }\n}\n")])])]),s("p",[a._v("CAS是乐观锁的其中一种，可以通过 "),s("code",[a._v("while(true)")]),a._v("配合"),s("code",[a._v("CAS")]),a._v("来实现乐观锁：")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (;;) {\n    bool result = compareAndSwap(&a, oldValue, newValue);\n    // 如果改失败了或者改成功了之后的业务逻辑....\n    if (result) {\n    } \n}\n")])])]),s("h2",{attrs:{id:"_2-cas-如何实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-cas-如何实现"}},[a._v("#")]),a._v(" 2. CAS 如何实现")]),a._v(" "),s("p",[a._v("java 的 CAS 利用的的是 Unsafe 这个类提供的 CAS 操作；"),s("strong",[a._v("简而言之，是因为硬件予以了支持，软件层面才能做到")]),a._v("。")]),a._v(" "),s("p",[a._v("我尝试在Java源码中找到对于compareAndSwap的实现，发现不过是徒劳~  因为是c艹写的~")]),a._v(" "),s("p",[a._v("如下是在 Unsafe类 中定义的部分方法：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var1 : 要操作的对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var2 : 要操作的变量的地址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var4 : 旧值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var5 : 新值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("native")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareAndSwapObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("native")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareAndSwapInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("native")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareAndSwapLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" var6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("当然了，Unsafe 类不仅可以使用CAS操作，还可以操作内存...")]),a._v(" "),s("h2",{attrs:{id:"_3-aba问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-aba问题"}},[a._v("#")]),a._v(" 3. ABA问题")]),a._v(" "),s("p",[a._v("CAS好用，但是会造成ABA问题。什么是ABA问题？")]),a._v(" "),s("p",[a._v("假设存在两个线程 t1 和 t2。 有一个共享变量 num，初始值为 A\n接下来， 线程 t1 想使用 CAS 把 num 值改成 Z, 那么就需要")]),a._v(" "),s("ul",[s("li",[a._v("先读取 num 的值, 记录到 oldNum 变量中")]),a._v(" "),s("li",[a._v("使用 CAS 判定当前 num 的值是否为 A， 如果为 A，就修改成 Z.")])]),a._v(" "),s("p",[a._v("但是， 在 t1 执行这两个操作之间， t2 线程可能把 num 的值从 A 改成了 B， 又从 B 改成了 A\n到这一步, t1 线程无法区分当前这个变量始终是 A， 还是经历了一个变化过程。")]),a._v(" "),s("p",[a._v("其实这样的运行过程在代码上没有错，但是线程 t1 肯定想要自己的操作是原子的，在操作时没有其他线程改来改去。这就好比，我们买一个手机，无法判定这个手机是刚出厂的新手机，还是别人用旧了又翻新过的手机。")]),a._v(" "),s("p",[a._v("怎么解决 CAS 问题呢？")]),a._v(" "),s("p",[a._v("aba的关键是值会反复横跳~~"),s("strong",[a._v("如果约定数据只能单方向变化，问题就迎刃而解了（只能增加，或者只能减小）")])]),a._v(" "),s("p",[a._v("如果需求要求该数值，既能增加也能减小，应该怎么办？可以引入另外一个版本号变量，约定版本号只能增加~~")]),a._v(" "),s("p",[s("strong",[a._v("每次CAS对比的时候，就不是对比数值本身，而是对比版本号！！")])]),a._v(" "),s("p",[a._v("在 CAS 比较数据当前值和旧值的同时, 也要比较版本号是否符合预期")])])}),[],!1,null,null,null);s.default=e.exports}}]);