(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{344:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redis数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis数据结构"}},[t._v("#")]),t._v(" Redis数据结构")]),t._v(" "),s("h2",{attrs:{id:"_1-简述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简述"}},[t._v("#")]),t._v(" 1. 简述")]),t._v(" "),s("p",[t._v("想必大家已经了解了Redis的几大"),s("code",[t._v("数据结构")]),t._v("，那么"),s("code",[t._v("数据类型")]),t._v("是什么？")]),t._v(" "),s("p",[t._v("😜其实是我自己编的，为了让自己理解这些东西造出来的~~")]),t._v(" "),s("blockquote",[s("p",[t._v("数据结构 ：像string、set、list、zset，我们可以直接使用的这些Redis具体的类型。")]),t._v(" "),s("p",[t._v("数据类型 ：上述数据结构底层的实现。")])]),t._v(" "),s("p",[t._v("该如何理解这两个词呢？")]),t._v(" "),s("p",[t._v("学习各种语言都是先学各种数据类型，例如int、float、char...")]),t._v(" "),s("p",[t._v("再学各种数据结构，例如栈、队列、树...")]),t._v(" "),s("p",[t._v("数据结构由数据类型组成，就像栈、队列这些结构的底层可以由数组实现。")]),t._v(" "),s("p",[t._v("本篇将会讲述以下内容 ：")]),t._v(" "),s("ul",[s("li",[t._v("数据类型 ：SDS、Intset、Dit、ZipList、QuickList、SkipList")]),t._v(" "),s("li",[t._v("用于确认数据结构使用哪种数据结构的"),s("code",[t._v("RedisObject")])]),t._v(" "),s("li",[t._v("数据类型 ：string、list、set、zset、Hash以及它们的应用场景。")])]),t._v(" "),s("p",[t._v("再说一句！本文的数据类型、数据结构都是本人杜撰！便于自己理解，实际上它们都是"),s("code",[t._v("数据类型")])]),t._v(" "),s("h2",{attrs:{id:"_2-数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型"}},[t._v("#")]),t._v(" 2. 数据类型")]),t._v(" "),s("p",[t._v("看了一些面试题，出现"),s("code",[t._v("Redis数据类型")]),t._v("这一块知识的，对于SDS和SkipList较多，Dict也有，Intset、ZipList、QuickList就比较少了。")]),t._v(" "),s("p",[t._v("主要还是它们的应用场景。")]),t._v(" "),s("h3",{attrs:{id:"_2-1-sds动态字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-sds动态字符串"}},[t._v("#")]),t._v(" 2.1 SDS动态字符串")]),t._v(" "),s("p",[t._v("Redis构建了一种结构体来完成存储字符串的功能："),s("strong",[s("code",[t._v("简单动态字符串")])]),t._v("（"),s("code",[t._v("S")]),t._v("imple "),s("code",[t._v("D")]),t._v("ynamic "),s("code",[t._v("S")]),t._v("tring），简称SDS。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("char buf[]")]),t._v(" ：字节数组，用于存储string/int/float。")]),t._v(" "),s("li",[s("code",[t._v("uint8_t alloc")]),t._v(" ：记录buf数组申请的总字节数,类型为8位无符号整型。不包括结束标志'\\0'。")]),t._v(" "),s("li",[s("code",[t._v("uint8_t len")]),t._v(" ：记录buf数组中已经使用的字节的数量,类型为:8位无符号整型。不包括结束标志。")]),t._v(" "),s("li",[s("code",[t._v("unsigned char flags")]),t._v(" ：记录SDS的最大空间，即决定alloc的最大值。因为存储空间不同，SDS类型也不同，有很多不同类型的SDS，例如16位、32位...")])]),t._v(" "),s("p",[t._v("之所以被称为动态字符串，因为这个字符串有"),s("code",[t._v("动态扩容机制")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("扩容后")]),t._v("的空间小于1M ：扩容后的空间大小乘以 2＋1")]),t._v(" "),s("li",[s("code",[t._v("扩容后")]),t._v("的空间大于1M ：空间直接 +1M+1")])]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 扩容方案:")]),t._v("\nni -> nihao\n"),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 原空间: ")]),t._v("\n    len=2\n    alloc=2\n"),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 扩容后:")]),t._v("\n    len=5\n    alloc=10\n"),s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" 为什么没有加一？不应该是5*2 + 1 = 11吗?")]),t._v("\n    因为字符串后面有 '\\0', 而这len和alloc两个字段都不计算结束标志。\n    空间确实有了，但是alloc没有计算进去。\n")])])]),s("p",[t._v("但是alloc的类型是8位无符号整型，只能存储2^8个数字，太有限，所以Redis提供了不同类型的SDS，它们的其他特性都相同，只有alloc、len的类型不同，有5位、8位、16位、32位。")]),t._v(" "),s("p",[t._v("如何区分？使用 "),s("code",[t._v("flag")]),t._v(" 这个字段。flag有不同的值，分别代表字节大小，5、8、16、32.")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20221212203840905.png",alt:"image-20221212203840905"}}),t._v(" "),s("p",[t._v("总结 ：flag规定alloc的最大值，需要扩容时需要改变alloc甚至flag。alloc规定字符串可以存储多少元素，一旦超过，需要扩容。len是当前元素个数。buf[]存储当前元素。")]),t._v(" "),s("h3",{attrs:{id:"_2-2-intset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-intset"}},[t._v("#")]),t._v(" 2.2 Intset")]),t._v(" "),s("p",[t._v("Intset是Redis中set集合的一种实现方式，基于整数数组来实现，具有"),s("code",[t._v("长度可变")]),t._v("、"),s("code",[t._v("唯一")]),t._v("、"),s("code",[t._v("有序")]),t._v("等特点。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int8_t")]),t._v(" contents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" intset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("uint32_t encoding")]),t._v(" ：数据编码方式，支持存放16位、32位、64位的数据。")]),t._v(" "),s("li",[s("code",[t._v("uint32_t length")]),t._v(" ：元素个数。")]),t._v(" "),s("li",[s("code",[t._v("int8_t contents[]")]),t._v(" ：整数数组，保存集合数据。数据范围由encoding确认。")])]),t._v(" "),s("blockquote",[s("p",[t._v("那么Intset如何维持"),s("code",[t._v("有序")]),t._v("、"),s("code",[t._v("唯一")]),t._v("的特点？")])]),t._v(" "),s("p",[t._v("在插入时 ：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("检查插入数据是否太大或太小，是否需要改变encoding编码。")]),t._v(" "),s("p",[t._v("如果重置编码，假如重置编码后原来的16位变成32位，需要重新拷贝数组的原有数据到升级后的内存而且需要倒序拷贝防止数据丢失。")])]),t._v(" "),s("li",[s("p",[t._v("查看数组中是否已经存在该数据，若已存在就不插入，若不存在，二分法获得该数据的插入位置。")]),t._v(" "),s("p",[t._v("二分法保证数据有序，数据有序可以使用二分法。")])]),t._v(" "),s("li",[s("p",[t._v("数组原地扩容，将待插入元素插入")])])]),t._v(" "),s("p",[t._v("通过第二点就可以保证Intset的唯一性和有序性。")]),t._v(" "),s("p",[t._v("上述具体步骤可以打开Redis源码阅读。将Redi安装包打开即可。")]),t._v(" "),s("h3",{attrs:{id:"_2-3-dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-dict"}},[t._v("#")]),t._v(" 2.3 Dict")]),t._v(" "),s("p",[t._v("Redis是典型的键值型（key-value）数据库，它就是靠"),s("code",[t._v("Dict")]),t._v("来保持键与值的映射关系的。")]),t._v(" "),s("p",[t._v("Java中的Map是基于Hash的字典结构，Redis中的字典Dict也是。")]),t._v(" "),s("p",[s("code",[t._v("Dict")]),t._v("由三部分组成 ：哈希节点（DictEntry）、哈希表（DictHashTable）、字典（Dict）。")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230128144750887.png",alt:"image-20230128144750887"}}),t._v(" "),s("p",[t._v("从小往大说，先说哈希节点与哈希表，一个哈希表可以包含多个哈希节点，哈希节点是键-值型的。")]),t._v(" "),s("p",[s("code",[t._v("哈希节点：")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("key")]),t._v("：哈希节点的键。")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v(" ：哈希节点的值，为联合体类型。")]),t._v(" "),s("li",[s("code",[t._v("*next")]),t._v(" ：为了方便寻址，每个哈希节点都有指向下一个哈希节点的指针。")])]),t._v(" "),s("p",[s("code",[t._v("哈希表 ：")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n")])])]),s("ul",[s("li",[s("code",[t._v("table")]),t._v(" ：指向键值对数组的指针。数组是指针，table是指向数组的指针，所以table是二级指针。")]),t._v(" "),s("li",[s("code",[t._v("size")]),t._v(" ：哈希表大小。总等于 2^n （n为整数）。")]),t._v(" "),s("li",[s("code",[t._v("sizemark")]),t._v(" ：哈希表大小的掩码，总等于size - 1 。")]),t._v(" "),s("li",[s("code",[t._v("used")]),t._v(" ：哈希节点个数。")])]),t._v(" "),s("p",[t._v("为什么有了size表示哈希节点个数，还要使用used多此一举呢？")]),t._v(" "),s("p",[t._v("Hash运算会产生Hash冲突，会在数组的基础上多一些链表，size表示数组元素个数，used表示数组+链表的元素个数。")]),t._v(" "),s("p",[t._v("当我们向Dict添加键值对时，Redis首先根据key计算出hash值，然后通过hash & sizemark计算该数据应该放到数组中哪个位置。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230129120039787.png",alt:"image-20230129120039787"}})]),t._v(" "),s("p",[t._v("除了哈希节点与哈希表之外，Dict最后一个组成："),s("code",[t._v("字典 DictHashTable")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tdictType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int16_t")]),t._v(" pauserehash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("*type")]),t._v("：本字典的类型，不同类型使用不同Hash函数。")]),t._v(" "),s("li",[s("code",[t._v("*privdata")]),t._v(" ：私有数据，在做特殊hash运算时使用。")]),t._v(" "),s("li",[s("code",[t._v("ht[2]")]),t._v(" ：一个字典拥有两个哈希表，一个放哈希节点，一个为rehash时使用。")]),t._v(" "),s("li",[s("code",[t._v("rehashidx")]),t._v(" ：rehash的进度，-1代表未开始。")]),t._v(" "),s("li",[s("code",[t._v("pauserehash")]),t._v(" ：rehash是否暂停，1则暂停，0则继续。")])]),t._v(" "),s("p",[t._v("总结 ：Dict底层是基于数组、链表的Hash表，数组中保存的是一个个entry键值对，键值对的类型大多是指针，指向SDS对象。数组中的entry键值对由next指针连接，便于寻址。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-ziplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-ziplist"}},[t._v("#")]),t._v(" 2.4 ZipList")]),t._v(" "),s("p",[t._v("压缩链表，为了节省内存而设计的链表，由一系列特殊编码的"),s("code",[t._v("连续空间")]),t._v("组成，可以在任意一端进行压入/弹出操作，并且该操作的时间复杂度为 "),s("code",[t._v("O(1)")]),t._v("。")]),t._v(" "),s("p",[t._v("但是成也连续，败也连续，ZipList的诞生是为了解决Dict指针过多且内存不连续的问题，不过产生了新问题 ：一旦数据量太大，上哪去找这么多连续的空间？所以很多Redis的数据类型只在数据量小的时候用ZipList。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ziplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" albytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" zltail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" zllen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    entry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" zlend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" ziplist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("zlbytes")]),t._v(" ：总字节数")]),t._v(" "),s("li",[s("code",[t._v("zltail")]),t._v(" ：尾节点与起始地址之间的字节数")]),t._v(" "),s("li",[s("code",[t._v("zllen")]),t._v(" ：entry节点的个数")]),t._v(" "),s("li",[s("code",[t._v("zlend")]),t._v(" ：结束标志，0xff")]),t._v(" "),s("li",[s("code",[t._v("entry")]),t._v(" ：ZipList中所有节点，个数、字节大小不定。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230129155533677.png",alt:"image-20230129155533677"}})]),t._v(" "),s("p",[t._v("entry字节大小不确定，那遍历的时候该如何遍历呢？数组中的元素字节大小固定，可以知道每次读取几个字节的空间，链表直接使用指针指向下一个元素，那么entry该如何遍历？")]),t._v(" "),s("p",[t._v("只要在entry这个结构内部记录一下使用的空间就行了。")]),t._v(" "),s("p",[t._v("但是Entry记录的是上一个entry占用的字节数。（Redis7改为此entry字节数）")]),t._v(" "),s("p",[t._v("每一个entry有三个字段 ：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("previous_entry_length")]),t._v(" ：前一节点的长度，1-5个字节。")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" ：本节点属性，记录content的数据类型（整数/字符串）以及长度。")]),t._v(" "),s("li",[s("code",[t._v("contents")]),t._v(" ：保存节点数据，可以是字符串或整数。")])]),t._v(" "),s("p",[t._v("只要知道前一个节点/本节点的字节数，就可以遍历。")]),t._v(" "),s("h3",{attrs:{id:"_2-5-quicklist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-quicklist"}},[t._v("#")]),t._v(" 2.5 QuickList")]),t._v(" "),s("p",[t._v("为了解决ZipList的问题，QuickList诞生了。")]),t._v(" "),s("p",[t._v("ZipList的问题是空间连续，但是找不到太大的连续空间。")]),t._v(" "),s("p",[t._v("为了解决这个问题，QuickList采用两种方法 ：")]),t._v(" "),s("ul",[s("li",[t._v("限制entry的个数及大小。")]),t._v(" "),s("li",[t._v("使用多个ZipList。")])]),t._v(" "),s("p",[t._v("一个5M的数据，使用一个ZipList可能找不到连续的5M空间，但如果可以找到5个连续的1M空间，就可以将这个数据分为5份，使用5个ZipList存储。")]),t._v(" "),s("p",[t._v("Redis3.2之后引入的QuickList是一个双端链表，只不过每一个节点都是一个ZipList。")]),t._v(" "),s("p",[t._v("除了控制ZipList的大小，QuickList还对节点的ZipList进行压缩")]),t._v(" "),s("p",[t._v("QuickListNode（节点）源码：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向前一个结点的指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向后一个节点的指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前节点的ziplist指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前节点的ziplist的字节数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前节点所属的ziplist的entry个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码方式 1.ZipList  2.lzf压缩模式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否被解压缩 1说明被解压了，以后要重新压缩")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" recompress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("QuickList源码：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头节点指针")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尾节点指针")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有ziplist中的entry个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplist个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplist的entry数量上限")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fill"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认为2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("（源码删了一点没用的）")]),t._v(" "),s("p",[t._v("当存储一定数据时，QuickList的模样 ：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230129164440634.png",alt:"image-20230129164440634"}})]),t._v(" "),s("p",[t._v("总结 QuickList特点：")]),t._v(" "),s("ol",[s("li",[t._v("节点为ziplist的双端链表。")]),t._v(" "),s("li",[t._v("控制ziplist中entry的个数以及每个entry的大小。")]),t._v(" "),s("li",[t._v("中间节点可以压缩，进一步节省内存。")])]),t._v(" "),s("h3",{attrs:{id:"_2-6-skiplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-skiplist"}},[t._v("#")]),t._v(" 2.6 "),s("code",[t._v("SkipList")])]),t._v(" "),s("p",[t._v("SkipList，面试中经常问的跳表，被称为跳表是因为它遍历的时候可以“跳”着遍历。")]),t._v(" "),s("p",[t._v("对于一个有序数组，可以使用二分法快速查找，但是链表怎么快速呢？")]),t._v(" "),s("p",[t._v("正常的链表只有指向前后节点的指针，但是跳表不一样，它有"),s("code",[t._v("随机个随机指针")]),t._v("。对于1-10这几个数组成的跳表，可能1这个元素中有指向5、6、9、10的指针，2有指向3、4、8、10的，10可能有指向1、4、7的指针。这样就可以"),s("code",[t._v("通过不断的跳跃、比较")]),t._v("，快速得到想要的值。此结构正因为这个特点被称为跳表。")]),t._v(" "),s("p",[t._v("当然了，跳表的指针是随机生成的，随机性太大，可能一次就找到值，可能需要一个一个遍历。")]),t._v(" "),s("p",[t._v("SkipList（跳表）首先是链表，但与传统链表有几点差异 ：")]),t._v(" "),s("ul",[s("li",[t._v("元素升序排列，不过不是按照元素进行排序，而是根据元素生成的score排序。")]),t._v(" "),s("li",[t._v("节点可能包含多个指针，指针跨度随机。")])]),t._v(" "),s("p",[t._v("正因为这两个特点，跳表可以边跳跃边比较，大大提高查询效率。")]),t._v(" "),s("p",[t._v("跳表节点")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sds ele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zskiplistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistLevel")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        zskiplistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" span"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("zskiplistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("ele")]),t._v(" ：节点存储的值。")]),t._v(" "),s("li",[s("code",[t._v("score")]),t._v(" ：节点的分数，用于排序。")]),t._v(" "),s("li",[s("code",[t._v("backward")]),t._v(" ：前一个节点的指针。")]),t._v(" "),s("li",[s("code",[t._v("level")]),t._v(" ：多级索引数组，所有后继节点")]),t._v(" "),s("li",[s("code",[t._v("forward")]),t._v(" ：一个节点可能有多个level，forward指向这个level代表的节点。")]),t._v(" "),s("li",[s("code",[t._v("span")]),t._v(" ：索引跨度，第一个节点指向第十个节点，跨度为9")])]),t._v(" "),s("p",[t._v("跳表")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("header tail")]),t._v(" ：头节点、尾节点。")]),t._v(" "),s("li",[s("code",[t._v("length")]),t._v(" ：节点数量。")]),t._v(" "),s("li",[s("code",[t._v("level")]),t._v(" ：最大索引层级，默认为1，最大为32，即一个节点的后继指针可以有1-32个。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230129230812411.png",alt:"image-20230129230812411"}})]),t._v(" "),s("p",[t._v("SkipList特点：")]),t._v(" "),s("ol",[s("li",[t._v("双向链表，每个节点包含score和ele值")]),t._v(" "),s("li",[t._v("节点按照score排序，score值一样则按照ele排序")]),t._v(" "),s("li",[t._v("每个节点都可以包含多层指针，层数是1-32的随机值")]),t._v(" "),s("li",[t._v("不同指针到下一个节点的跨度不同，层级越高，跨度越大。")]),t._v(" "),s("li",[t._v("增删改查效率与红黑树基本一致，实现却更简单。")])]),t._v(" "),s("h2",{attrs:{id:"_3-redisobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-redisobject"}},[t._v("#")]),t._v(" 3. RedisObject")]),t._v(" "),s("p",[t._v("学习了以上几种数据类型，有什么用呢？对，组成Redis中可以使用的数据结构，那么各个数据结构用什么样的底层实现呢？在哪里可以看到呢？在哪里记录下来呢？")]),t._v(" "),s("p",[s("code",[t._v("RedisObject")])]),t._v(" "),s("p",[t._v("Redis中的任何数据类型都会被封装为一个RedisObject，也叫做Redis对象。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" refcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[s("code",[t._v("type")]),t._v(" ：此对象的类型，分别为string、list、set、zset、hash")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("encoding")]),t._v(" ：此对象的底层实现，上述SDS、Intset、Dict、SkipList...有11个值。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("lru")]),t._v(" ：记录当前Redis对象最近一次访问时间，以便将长时间未使用的对象回收。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("refcount")]),t._v(" ：对象引用计数器，计数器为0则说明对象无人使用，可以被回收。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("*ptr")]),t._v(" ：指向具体存放数据的空间。")])])]),t._v(" "),s("p",[t._v("type和encoding字段是本篇文章关注的地方。")]),t._v(" "),s("p",[t._v("先来看看encoding字段的11个值 ：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("编号")]),t._v(" "),s("th",[t._v("编码方式")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("INT")])]),t._v(" "),s("td",[t._v("long类型的整数字符串")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("RAW")])]),t._v(" "),s("td",[t._v("raw编码的动态字符串")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("EMBSTR")])]),t._v(" "),s("td",[t._v("embstr编码的动态字符串")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("INTSET")])]),t._v(" "),s("td",[t._v("整数集合")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("ZIPLIST")])]),t._v(" "),s("td",[t._v("压缩列表")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("QUICKLIST")])]),t._v(" "),s("td",[t._v("快速列表")])]),t._v(" "),s("tr",[s("td",[t._v("6")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("SKIPLIST")])]),t._v(" "),s("td",[t._v("跳表")])]),t._v(" "),s("tr",[s("td",[t._v("7")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("LINKEDLIST")])]),t._v(" "),s("td",[t._v("双端链表")])]),t._v(" "),s("tr",[s("td",[t._v("8")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("HT")])]),t._v(" "),s("td",[t._v("字典")])]),t._v(" "),s("tr",[s("td",[t._v("9")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("ZIPMAP")])]),t._v(" "),s("td",[t._v("已废弃")])]),t._v(" "),s("tr",[s("td",[t._v("10")]),t._v(" "),s("td",[t._v("OBJ_ENCODING_"),s("code",[t._v("STREAM")])]),t._v(" "),s("td",[t._v("Stream流")])])])]),t._v(" "),s("p",[t._v("可以看到，string有三种编码方式，list有3中编码方式，set有三种编码方式。")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230128213044917.png",alt:"image-20230128213044917"}}),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_4-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据结构"}},[t._v("#")]),t._v(" 4. 数据结构")]),t._v(" "),s("h3",{attrs:{id:"_4-1-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-string"}},[t._v("#")]),t._v(" 4.1 string")]),t._v(" "),s("p",[t._v("string是Redis最常见的数据存储类型。")]),t._v(" "),s("ul",[s("li",[t._v("如果存储的字符串长度小于44字节，则会使用EMBSTR编码。此时"),s("code",[t._v("object head与SDS是一片连续空间")]),t._v("，申请内存时只需要调用一次内存内存分配函数，效率更高。")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230130113634586.png",alt:"image-20230130113634586"}}),t._v(" "),s("ul",[s("li",[t._v("SDS长度大于44，编码方式是RAW。object head与SDS不再连续")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230130113114911.png",alt:"image-20230130113114911"}})]),t._v(" "),s("ul",[s("li",[t._v("如果SDS的内容是数字，并且这个数字在Long_MAX范围内就使用INT编码方式。INT编码方式直接将数据存在RedisObject的ptr指针位置（刚好8字节），不需要SDS了。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230128221749947.png",alt:"image-20230128221749947"}})]),t._v(" "),s("p",[t._v("可以看出明显区别 ：EMBSTR的空间是连续的，因为字符串体积小，容易申请连续空间。")]),t._v(" "),s("p",[t._v("以下向Redis存储四个值，分别为 数字、短字符串、44位字符串、45位字符串，查看的编码方式结果如下：")]),t._v(" "),s("div",{staticClass:"language-she extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('yun:0>set a 12\n"OK"\nyun:0>object encoding a\n"int"\nyun:0>set b xiaoming\n"OK"\nyun:0>object encoding b\n"embstr"\nyun:0>set c 01234567890123456789012345678901234567890123\n"OK"\nyun:0>object encoding c\n"embstr"\nyun:0>set d 012345678901234567890123456789012345678901234\n"OK"\nyun:0>object encoding d\n"raw"\n')])])]),s("h3",{attrs:{id:"_4-2-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-list"}},[t._v("#")]),t._v(" 4.2 list")]),t._v(" "),s("p",[t._v("list拥有三种编码方式 ：linkedlist、ziplist、quicklist。自从QuickList出现后就很少用LinkedList了。")]),t._v(" "),s("p",[t._v("所以在Redis3.2版本后，Redis统一采用QuickList实现List。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230130095118130.png",alt:"image-20230130095118130"}})]),t._v(" "),s("h3",{attrs:{id:"_4-3-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-set"}},[t._v("#")]),t._v(" 4.3 set")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当存储的数据全部为整数，且元素数量不超过set-max-intset-emtries时，set使用intset编码")])]),t._v(" "),s("li",[s("p",[t._v("其他情况使用Dict编码，使用它的key，value统一为null。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230130100836039.png",alt:"image-20230130100836039"}})]),t._v(" "),s("h3",{attrs:{id:"_4-4-zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-zset"}},[t._v("#")]),t._v(" 4.4 zset")]),t._v(" "),s("p",[t._v("zset也就是sortedset，每一个元素都有一个用于排序的score值。zset的特点 ：")]),t._v(" "),s("ul",[s("li",[t._v("score值用于排序")]),t._v(" "),s("li",[t._v("键唯一")]),t._v(" "),s("li",[t._v("可以根据键查询分数")])]),t._v(" "),s("p",[t._v("看起来可以用SkipList，但是跳表的键不唯一，而且它的score虽然可以排序，但无法查询。")]),t._v(" "),s("p",[t._v("看起来可以用Dict，但Dict无法排序。")]),t._v(" "),s("p",[t._v("那么我们将它们结合起来不就行了？一个zset包含一个SkipList和一个Dict，添加元素时先向Dict添加，保证元素唯一，如果元素唯一再向SkipList添加，保证可排序。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zskiplist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zsl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("虽然zset使用了两种结构，但它的编码写成skiplist。")]),t._v(" "),s("p",[t._v("但是当元素数量小于128或元素大小小于64字节时，zset会使用ZipList节省空间。")]),t._v(" "),s("ul",[s("li",[t._v("元素数量小于128或元素大小小于64字节时，使用ZipList节省空间。")]),t._v(" "),s("li",[t._v("其他情况使用 Dict + SkipList。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230130102429885.png",alt:"image-20230130102429885"}})]),t._v(" "),s("h3",{attrs:{id:"_4-5-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-hash"}},[t._v("#")]),t._v(" 4.5 hash")]),t._v(" "),s("p",[t._v("Hash结构与Redis中的Zset很像")]),t._v(" "),s("ul",[s("li",[t._v("键值存储")]),t._v(" "),s("li",[t._v("可以根据键获取值")]),t._v(" "),s("li",[t._v("键唯一")])]),t._v(" "),s("p",[t._v("二者差别例如zset的值必须是数字，用于排序。而Hash结构不用排序。")]),t._v(" "),s("p",[t._v("Hash底层采用的编码与Zset基本一致，只需要把排序有关的SkipList去掉即可 ：")]),t._v(" "),s("ul",[s("li",[t._v("Hash默认使用ZipList编码，以节省内存。ZipList的相邻两个entry分别存储键、值。")]),t._v(" "),s("li",[t._v("当元素数量超过512或任意一个entry节点大小超过64字节时Hash结构会转为HT编码，也就是Dict。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230130095246270.png",alt:"image-20230130095246270"}})]),t._v(" "),s("h3",{attrs:{id:"_4-6-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-总结"}},[t._v("#")]),t._v(" 4.6 总结")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20230130113903956.png",alt:"image-20230130113903956"}}),t._v(" "),s("h2",{attrs:{id:"_5-应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-应用场景"}},[t._v("#")]),t._v(" 5. 应用场景")]),t._v(" "),s("h3",{attrs:{id:"_5-1-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-string"}},[t._v("#")]),t._v(" 5.1 string")]),t._v(" "),s("ol",[s("li",[t._v("用于做"),s("code",[t._v("缓存")])]),t._v(" "),s("li",[t._v("setnx 操作生成"),s("code",[t._v("分布式锁")])]),t._v(" "),s("li",[t._v("这时可以用于"),s("code",[t._v("计数器")]),t._v("。当数据是数字时，string不会创建新的SDS对象，而是将数字存储在RedisObject的ptr上，非常节省空间。")])]),t._v(" "),s("p",[t._v("用于计数器且并发量高的情况下，假如用于文章浏览量，你的服务拆分为10台机器，这10台机器可能同时抢夺浏览量为100的这个数字，那么只有一台机器可以成功，剩下9台都会失败，效率太低。此时我们可以使用"),s("code",[t._v("INCRBY")]),t._v("，一台机器过来，我们给它100个浏览量，它自己用去吧，Redis中的数据直接INCRBY 100即可。这样就可以提高效率。")]),t._v(" "),s("h3",{attrs:{id:"_5-2-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-list"}},[t._v("#")]),t._v(" 5.2 list")]),t._v(" "),s("p",[t._v("list支持双端插入、访问")]),t._v(" "),s("p",[t._v("用作信息流。例如你关注很多公众号，这些公众号发的文章都可以塞进你的list中")]),t._v(" "),s("h3",{attrs:{id:"_5-3-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-set"}},[t._v("#")]),t._v(" 5.3 set")]),t._v(" "),s("p",[t._v("很多人用set的原因估计就是值唯一吧，这个就可以用作点赞列表、好友列表、关注列表、收藏等等..")]),t._v(" "),s("p",[t._v("同时它可以求交集、并集，这样就支持“共同好友”、“你可能认识的人”等等操作")]),t._v(" "),s("h3",{attrs:{id:"_5-4-zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-zset"}},[t._v("#")]),t._v(" 5.4 zset")]),t._v(" "),s("p",[t._v("zset可以根据score排序，同时保证值唯一。常用于排行榜。")]),t._v(" "),s("h3",{attrs:{id:"_5-5-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-hash"}},[t._v("#")]),t._v(" 5.5 hash")]),t._v(" "),s("p",[t._v("可用于购物车，hash的操作很契合“购物车”这一功能需求 ：增加删除商品、增加减小某个商品的数量、选中全部、获取全部商品的数量....")])])}),[],!1,null,null,null);s.default=n.exports}}]);