(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{375:function(_,t,v){"use strict";v.r(t);var a=v(7),s=Object(a.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1-cap-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-cap-简介"}},[_._v("#")]),_._v(" 1. CAP 简介")]),_._v(" "),t("blockquote",[t("p",[_._v("CAP理论指出 ：一个分布式系统不能同时满足一致性、高可用性、分区容错性。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/cap.png",alt:"CAP"}})]),_._v(" "),t("p",[_._v("C、A、P 是三个约束属性 ：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("C ：Consistency，一致性。访问所有的节点，得到数据结果是一样的。")]),_._v(" "),t("p",[_._v("注意 ：这里的 一致性 指的是强一致性，也就是数据更新完，访问任意节点看到的数据完全一致，要和弱一致性、最终一致性区分开。")])]),_._v(" "),t("li",[t("p",[_._v("A ：Availability，可用性。所有节点都保持高可用性。")]),_._v(" "),t("p",[_._v("注意 ：这里的高可用还包括，不能出现延迟，如 节点B 由于等待数据同步而阻塞了请求，那么 节点B 就不满足高可用性。A 就是满足客户端访问始终能有回复即可(不管回复的是否正确)")])]),_._v(" "),t("li",[t("p",[_._v("P ：Partition Tolerance，分区容错性 。分布式系统出现"),t("strong",[_._v("网络分区")]),_._v("的时候，仍然能够对外提供服务。")]),_._v(" "),t("p",[_._v("注意 ：这里的分区指的是网络意义上的分区。由于网络是不可靠的，所有节点可能出现无法通信的情况，在节点被迫分区而无法通信时，要保证节点可以继续服务")])])]),_._v(" "),t("p",[t("strong",[_._v("什么是分区？")])]),_._v(" "),t("p",[_._v("分布式系统中，多个节点之间的网络本来是连通的，但是因为某些故障，比如某个节点出了问题，某些节点与另外的节点无法通信了，整个网络就被分为两个网络分区。无法通信就无法进行数据同步。最终两个分区会出现数据不一致。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/20231101225513.png",alt:"网络分区"}})]),_._v(" "),t("p",[_._v("CAP理论对于那些本身"),t("strong",[_._v("带有数据存储的分布式系统")]),_._v("更加有用，假设一个分布式系统的各个节点都读写同一个MySQL，那么对于这个分布式系统而言，讨论CAP没有意义。")]),_._v(" "),t("p",[_._v("所以在讨论CAP理论时，更多的是针对那些有数据存储、数据复制场景的分布式存储系统，比如MySQL、Redis。")]),_._v(" "),t("p",[_._v("Zookeeper 用的是 CP，Eureka 用的是 AP，Nacos 不仅支持 CP 也支持 AP。")]),_._v(" "),t("h2",{attrs:{id:"_2-为何只能三选二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-为何只能三选二"}},[_._v("#")]),_._v(" 2. 为何只能三选二？")]),_._v(" "),t("p",[_._v("假设现在有两个机子 ：服务器A 、服务器B。它们内部都有一个值 number。")]),_._v(" "),t("p",[_._v("此时 服务器A 中的 number 被改变...")]),_._v(" "),t("h3",{attrs:{id:"_2-1-cp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-cp"}},[_._v("#")]),_._v(" 2.1 CP")]),_._v(" "),t("p",[_._v("我们在保证 一致性、分区容错性，试试能否再实现 高可用性。")]),_._v(" "),t("p",[_._v("为了保证一致性，服务器A 中 number 的改变一定要发送给 服务器B，但是因为网络原因，服务器A 发送给 服务器B 的消息阻塞或丢失。那么数据就有可能出现不一致问题，但是我们想保证一致性，所以服务B 要停止服务等待数据同步，那么就违反了高可用性。")]),_._v(" "),t("h3",{attrs:{id:"_2-2-ap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-ap"}},[_._v("#")]),_._v(" 2.2 AP")]),_._v(" "),t("p",[_._v("我们在保证 高可用性、分区容错性，试试能否再实现 一致性。")]),_._v(" "),t("p",[_._v("为了保证高可用性，服务器A 和 服务器B 都必须快速响应。同样的由于网络不可靠，服务器B 还没来得及接收到服务器A 发来的数据同步请求，就要响应用户的获取数据请求，导致 服务器A 返回的数据与 服务器B 返回的数据不一致。这就无法实现一致性。")]),_._v(" "),t("h3",{attrs:{id:"_2-3-ca"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-ca"}},[_._v("#")]),_._v(" 2.3 CA")]),_._v(" "),t("p",[_._v("如果保证高可用和一致性，能否保证分区后正常提供服务？")]),_._v(" "),t("p",[_._v("网络是不可靠的，万一某个数据同步请求在发送过程中丢失，就会导致分区现象，各个网络区域的数据就会不一致。")]),_._v(" "),t("h2",{attrs:{id:"_3-如何抉择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何抉择"}},[_._v("#")]),_._v(" 3. 如何抉择")]),_._v(" "),t("p",[_._v("首先最起码要保证 P，如果分区了，可以把机器少的那个区域主动下线，也不能让它们一致提供错误数据。")]),_._v(" "),t("p",[_._v("在保证 P 的基础上再谈 A 和 C。当然，如果你不使用分布式系统，那肯定不需要考虑P，也就不会三选二😁")])])}),[],!1,null,null,null);t.default=s.exports}}]);