(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{387:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-spring-实现事务的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring-实现事务的方式"}},[t._v("#")]),t._v(" 1. Spring 实现事务的方式")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("编程式事务")]),t._v(" "),a("p",[t._v("通过 TransactionTemplate 或者 TreasactionManager 手动管理事务。")])]),t._v(" "),a("li",[a("p",[t._v("声明式事务")]),t._v(" "),a("p",[t._v("通过 @Transactional 注解 或 XML配置的形式声明事务。实际上是通过AOP完成。")])])]),t._v(" "),a("h3",{attrs:{id:"_1-1-编程式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-编程式事务"}},[t._v("#")]),t._v(" 1.1 编程式事务")]),t._v(" "),a("p",[t._v("通过硬编码的方式使用 Spring 中提供的抽象事务 API 来控制事务。")]),t._v(" "),a("p",[t._v("Spring 使用模板方法对其封装为我们提供了事务模板类 ：TranscationTemplate 方便我们使用")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionalService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionTemplate")]),t._v(" transactionTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performTransactionalOperation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        transactionTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionCallback")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doInTransaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionStatus")]),t._v(" status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这里执行事务操作")]),t._v("\n                userMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                userMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以进行数据库操作、调用其他需要事务支持的方法等")]),t._v("\n \t\t\t\t\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上述示例中，我们通过 execute() 方法来执行事务操作。TransactionCallback 的 doInTransaction() 方法中的代码将在事务的上下文中执行。")]),t._v(" "),a("p",[t._v("如果在 doInTransaction() 中发生了未捕获的异常，事务将会被回滚，并回到事务的起点。如果 doInTransaction() 正常执行，事务将被提交。")]),t._v(" "),a("p",[t._v("这也是为啥我们加了 @Transactional 注解后，捕获的异常不要自己解决了。如果自己解决了，Spring的事务管理就不生效了。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-声明式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-声明式事务"}},[t._v("#")]),t._v(" 1.2 声明式事务")]),t._v(" "),a("p",[t._v("这个更简单了。在需要事务的地方加上 @Transactional，加在方法上，这个方法有事务；加在类上，类中的所有方法都有事务。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-spring-事务传播行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-事务传播行为"}},[t._v("#")]),t._v(" 2. Spring 事务传播行为")]),t._v(" "),a("p",[a("strong",[t._v("事务传播行为是为了解决业务层方法之间互相调用的事务问题。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"BrightBlue"}},[t._v("当事务被另一个事务方法调用时，必须指定事务该如何传播")]),t._v("。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在新事务中运行。")],1),t._v(" "),a("p",[t._v("举个例子 ：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" aMethod "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" bMethod "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们在 A 类的 aMethod() 中调用了 B 类的 bMethod() 方法，这个时候就涉及到业务层方法之间的互相调用的事务问题。如果 B 类的 bMethod() 要回滚，如何配置事务的传播机制才能让 aMethod() 也跟着回滚呢？")]),t._v(" "),a("p",[t._v("在 Spring 的 TranscationDefinition 类中定义了几个常量，代表着 Spring 支持的事务传播机制。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionDefinition")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPAGATION_REQUIRED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPAGATION_SUPPORTS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPAGATION_MANDATORY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPAGATION_REQUIRES_NEW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPAGATION_NOT_SUPPORTED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPAGATION_NEVER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPAGATION_NESTED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其他属性不再展示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-1-required-需要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-required-需要"}},[t._v("#")]),t._v(" 2.1 REQUIRED（需要）")]),t._v(" "),a("p",[t._v("默认的事务传播行为，也是我们平时使用最多的事务传播行为。")]),t._v(" "),a("p",[a("font",{attrs:{color:"SkyBlue"}},[a("strong",[t._v("如果当前存在事务，加入当前事务。如果不存在，新建事务。")])])],1),t._v(" "),a("ul",[a("li",[t._v("如果 aMethod() 没有开启事务的话，bMethod会开启一个新事务，执行完就结束")]),t._v(" "),a("li",[t._v("如果 aMethod() 开启事务了，bMethod() 加入该事务。不管是 aMethod() 出现异常，还是 bMethod() 出现异常，两个方法都回滚。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-requires-new-需要新的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-requires-new-需要新的"}},[t._v("#")]),t._v(" 2.2 REQUIRES_NEW（需要新的）")]),t._v(" "),a("p",[a("font",{attrs:{color:"SkyBlue"}},[a("strong",[t._v("创建一个新事务，如果当前存在事务，则把当前事务挂起。")])])],1),t._v(" "),a("p",[t._v("也就是说不管外部方法是否开启事务，使用这个传播机制的方法都会开启一个新事务。aMethod() 和 bMethod() 这俩方法的执行就没啥关系了，各自不影响各自的执行情况。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-supports-支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-supports-支持"}},[t._v("#")]),t._v(" 2.3 SUPPORTS （支持）")]),t._v(" "),a("p",[a("font",{attrs:{color:"SkyBlue"}},[a("strong",[t._v("如果当前存在事务，则加入当前事务；如果当前没有事务，我也不用事务了。")])])],1),t._v(" "),a("p",[t._v("如果 aMethod() 中有事务，则 bMethod() 加入到 aMethod() 中，如果 aMethod() 回退，bMethod() 跟着回退。")]),t._v(" "),a("p",[t._v("如果 aMethod() 中没有事务，bMethod() 也以无事务方式运行。")]),t._v(" "),a("h3",{attrs:{id:"_2-4-not-supported-不支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-not-supported-不支持"}},[t._v("#")]),t._v(" 2.4 NOT_SUPPORTED（不支持）")]),t._v(" "),a("p",[a("font",{attrs:{color:"SkyBlue"}},[a("strong",[t._v("以非事务的方法运行，如果当前存在事务，挂起当前事务。")])])],1),t._v(" "),a("p",[t._v("如果 aMethod() 中有事务，先挂起它，bMethod() 以非事务方法运行。")]),t._v(" "),a("p",[t._v("如果 aMethod() 中没有事务，不管，以非事务方法运行。")]),t._v(" "),a("h3",{attrs:{id:"_2-5-mandatory-强制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-mandatory-强制"}},[t._v("#")]),t._v(" 2.5 MANDATORY （强制）")]),t._v(" "),a("p",[a("font",{attrs:{color:"SkyBlue"}},[a("strong",[t._v("当前存在事务，加入当前事务；当前没有事务，抛出异常。")])])],1),t._v(" "),a("p",[t._v("如果 aMethod() 中有事务，则 bMethod() 加入到 aMethod() 中，如果 aMethod() 回退，bMethod() 跟着回退。")]),t._v(" "),a("p",[t._v("如果 aMethod() 中没有事务，bMethod() 直接抛出异常。")]),t._v(" "),a("h3",{attrs:{id:"_2-6-never-从不"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-never-从不"}},[t._v("#")]),t._v(" 2.6 NEVER（从不）")]),t._v(" "),a("p",[a("font",{attrs:{color:"SkyBlue"}},[a("strong",[t._v("如果当前没有事务，就以非事务方法运行；如果有，抛出异常")])])],1),t._v(" "),a("p",[t._v("这个传播行为跟 NOT_SUPPORT 有点像，不过这个在有事务的情况下会抛出异常。")]),t._v(" "),a("p",[t._v("如果 aMethod() 有事务，bMethod() 抛出异常。")]),t._v(" "),a("p",[t._v("如果 aMethod() 没有事务，bMethod() 以非事务方法运行。")]),t._v(" "),a("h3",{attrs:{id:"_2-7-nested-嵌套的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-nested-嵌套的"}},[t._v("#")]),t._v(" 2.7 NESTED（嵌套的）")]),t._v(" "),a("p",[a("font",{attrs:{color:"SkyBlue"}},[a("strong",[t._v("如果当前存在事务，开启一个子事务；如果当前没事务，开启一个新事务。")])])],1),t._v(" "),a("p",[t._v("什么是子事务？父事务回滚子事务必须回滚；子事务回滚父事务不必回滚。")]),t._v(" "),a("p",[t._v("如果 aMethod() 有事务，bMethod() 开启一个子事务。aMethod() 回滚 bMethod() 也回滚；bMethod() 回滚 aMethod() 不回滚。")]),t._v(" "),a("p",[t._v("如果 aMethod() 没有事务，bMethod() 新建一个事务运行。")]),t._v(" "),a("h2",{attrs:{id:"_3-spring-事务的隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring-事务的隔离级别"}},[t._v("#")]),t._v(" 3. Spring 事务的隔离级别")]),t._v(" "),a("p",[t._v("**隔离级别：**主要解决多个同时运行且访问数据库数据相同的事务带来的并发问题。在数据库中事务的隔离性是这样定义的：数据库系统必须具有隔离并发运行各个事务的能力，使他们不会互相影响，避免产生并发问题。")]),t._v(" "),a("p",[t._v("Spring的接口TransactionDefinition中定义了表示隔离级别的常量，当然其实主要还是对应数据库的事务隔离级别：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("ISOLATION_DEFAULT：使用后端数据库默认的隔离界别，MySQL 默认可重复读，Oracle 默认读已提交。")])]),t._v(" "),a("li",[a("p",[t._v("ISOLATION_READ_UNCOMMITTED：读未提交")])]),t._v(" "),a("li",[a("p",[t._v("ISOLATION_READ_COMMITTED：读已提交")])]),t._v(" "),a("li",[a("p",[t._v("ISOLATION_REPEATABLE_READ：可重复读")])]),t._v(" "),a("li",[a("p",[t._v("ISOLATION_SERIALIZABLE：串行化")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);