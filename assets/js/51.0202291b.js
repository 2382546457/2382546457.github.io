(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{377:function(e,a,t){"use strict";t.r(a);var r=t(7),_=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简述"}},[e._v("#")]),e._v(" 1. 简述")]),e._v(" "),a("p",[e._v("什么是 Raft 算法，它是一种"),a("font",{attrs:{color:"Green"}},[a("strong",[e._v("分布式共识算法")])]),e._v("，这个算法是干啥的呢？")],1),e._v(" "),a("p",[e._v("Raft 是一种共识算法，其特点是让多个参与者针对某一件事达成完全一致：一件事，一个结论。")]),e._v(" "),a("p",[e._v("同时，已达成一致的结论是不可推翻的。可以举一个银行账户的例子来解释共识算法：假如由一批服务器组成一个集群来维护银行账户系统，如果有一个 Client 向集群的 Leader 发出“存 100 元”的指令，那么当集群返回成功应答之后，Client 再向集群发起查询时，一定能够查到被存储成功的这 100 元钱，就算有机器出现不可用情况，这 100 元的账也不可篡改。这就是共识算法要达到的效果。")]),e._v(" "),a("p",[e._v("上面那段话有个重点 ：client 向集群中的 Leader 发送消息。对，整个集群中只有 Leader 可以对外提供服务。")]),e._v(" "),a("p",[e._v("所有分布式项目都要使用 Raft 达成共识吗？")]),e._v(" "),a("p",[e._v("不需要，我们写的什么商城、博客系统，为什么搭建集群？为什么分布式部署？一方面是为了承载更多的流量，可以用负载均衡手段把流量分发，另一方面是害怕单体项目宕机了就无法提供服务。")]),e._v(" "),a("p",[e._v("但是 Raft 算法呢？一整个集群中只有 Leader 能够提供服务，无法做到请求分发，所以不适合刚刚说的应用场景，那 Raft 有啥用呢？主要用于对数据敏感的系统，例如数据存储、文件存储，用户上传的文件可以保证只要上传成功就一定安全，即使有节点宕机或者整个集群宕机，在集群恢复后仍然可以看到这些文件。")]),e._v(" "),a("p",[e._v("Raft 算法和 Zookeeper 的算法很像，Zookeeper 写入数据的步骤 ：用户向集群发送写命令，Zookeeper 的 Leader 节点在征求半数以上节点的同意之后才落盘。")]),e._v(" "),a("p",[e._v("现在来介绍一下什么是 Raft。")]),e._v(" "),a("p",[e._v("私你马赛，先来推荐一个B站视频 ："),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1so4y1r7eM/?share_source=copy_web&vd_source=1d9935400799240a10a2036e25bfe04e",target:"_blank",rel:"noopener noreferrer"}},[e._v("【动画：Raft算法Leader选举、脑裂后选举、日志复制、修复不一致日志和数据安全】 "),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"_2-任期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-任期"}},[e._v("#")]),e._v(" 2. 任期")]),e._v(" "),a("p",[e._v("Raft算法将 Leader 的当选 分为一个个任期（Term），每一个任期的开始都是 Leader 选举步骤。")]),e._v(" "),a("p",[e._v("每一个任期以一次选举作为起点，所以当一个节点成为 Candidate 并向其他节点拉票时，会将自己的 Term 加1，表示自己要竞争这个任期的 Leader。其他节点如果同意了这个请求，会将自己的 Term 与该请求中的 Term 同步。")]),e._v(" "),a("p",[e._v("比如有 A、B、C、D 三个节点，A 作为 Term = 1 时的 Leader，那么 B、C 就是 Term = 1 时的跟随者。此时 A 节点宕机，B 节点想要成为 Leader，要先将自己的 Term + 1，表示自己想要竞争 Term = 2 时的 Leader。")]),e._v(" "),a("h2",{attrs:{id:"_3-日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-日志"}},[e._v("#")]),e._v(" 3. 日志")]),e._v(" "),a("p",[e._v("日志是节点之间传输的数据，Raft 被称为共识算法，就是对日志的共识。如果一个系统想要使用 Raft 算法完成某项功能，那么日志就是需要更改的东西，比如这个系统要存储文件，文件数据就是各个节点之间需要进行共识的日志。")]),e._v(" "),a("p",[e._v("在 Raft 中，日志由三个重要部分组成：")]),e._v(" "),a("ul",[a("li",[e._v("Term ID ：该日志是在哪个任期形成的")]),e._v(" "),a("li",[e._v("Log Index ：该日志在这个任期内是第几个日志，当然了这个Log Index可以跟随Term ID 的改变而清零重计，也可以一直递增，就看你是怎么实现 Raft 算法了。")]),e._v(" "),a("li",[e._v("Data ：该日志记录的数据是啥")])]),e._v(" "),a("p",[e._v("所以节点之间传输的 RPC Message 就是 ：第 1 个任期的第 4 条日志，存储的数据为 abcdefg...")]),e._v(" "),a("h2",{attrs:{id:"_4-节点类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-节点类型"}},[e._v("#")]),e._v(" 4. 节点类型")]),e._v(" "),a("p",[e._v("遵循 Raft算法 的分布式集群中每个节点扮演以下三种角色之一 ：")]),e._v(" "),a("ol",[a("li",[e._v("Leader ：领导者。负责和客户端通信，接收来自客户端的命令并发给 Follower，创建日志、与 Follower 同步日志。")]),e._v(" "),a("li",[e._v("Follower ：跟随者，一丝不苟的执行来自 Leader 的命令，可以投票给 Candidate 使其成为 Leader。")]),e._v(" "),a("li",[e._v("Candidate ：候选者，当 Follower 长时间没有接收到 Leader 的消息时，Follower就会揭竿而起成为候选者。")])]),e._v(" "),a("p",[e._v("解释一下 ：在 Raft 系统中并没有固定的 Leader，每一个节点都有成为 Leader 的机会。")]),e._v(" "),a("h3",{attrs:{id:"_4-1-follower-跟随者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-follower-跟随者"}},[e._v("#")]),e._v(" 4.1 Follower 跟随者")]),e._v(" "),a("p",[e._v("接收来自 Leader 的数据，并与之同步。")]),e._v(" "),a("p",[e._v("如果没有 Leader 怎么办？集群刚启动时，所有节点都为 Follower，"),a("font",{attrs:{color:"green"}},[a("strong",[e._v("每一个节点维护一个随机的过期时间 Timeout")])]),e._v("，时间到的时候就会变成 Candidate，给集群中其他节点发送 RPC 消息拉票，如果超过半数的节点同意，它就变成 Leader了。")],1),e._v(" "),a("p",[e._v("当然了，毕竟不是谁都能当上 Leader 的，如果 Follower 在 Timeout 时间内接收到 Candidate 的拉票消息，怎么判断是否投票给它呢？")]),e._v(" "),a("ol",[a("li",[e._v("候选者的 Term ID 比自己小，拒绝投票，如果比自己大继续下一步")]),e._v(" "),a("li",[e._v("候选者的最新日志的 Term ID 比自己最新日志的 Term ID小，拒绝投票，如果比自己大继续下一步")]),e._v(" "),a("li",[e._v("候选者的最新日志的 Index 比自己小，拒绝投票")])]),e._v(" "),a("p",[e._v("如果上面三条没有筛选掉候选者，Follower 会支持它当 Leader，Follower 要做的事 ：")]),e._v(" "),a("ol",[a("li",[e._v("将自己的 Term ID 与 候选者同步")]),e._v(" "),a("li",[e._v("发送 RPC 给这个候选者投票")])]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/1562656678570-8436d3d5-c175-469d-bb7a-ebe620c5e266.png",alt:"是否投票给候选者"}}),e._v(" "),a("p",[e._v("当 Follower 把票投给某候选者后，会将自己的 Term ID 与该候选者保持一致。")]),e._v(" "),a("p",[e._v("show me code ：")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("candidate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("termId "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("termId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("candidate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("logTermID "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("logTermId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("candidate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("logIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("logIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 将自己的任期与候选者同步")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("termId "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" candidate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("termID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 给候选者发送RPC请求，告诉它我同意你当 Leader")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("rpcServer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sendRPCVote")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("一个 Follower 每一个任期都只能投出一票。避免了一个 Follower 支持多个 Candidate 当 Leader 的情况。")]),e._v(" "),a("h3",{attrs:{id:"_4-2-candidate-候选者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-candidate-候选者"}},[e._v("#")]),e._v(" 4.2 Candidate 候选者")]),e._v(" "),a("p",[e._v("当 Follower 超时之后变成 Candidate，变成 Candidate 后要做的事：")]),e._v(" "),a("ol",[a("li",[e._v("把 Term 加一，代表要竞争这个任期的 Leader")]),e._v(" "),a("li",[e._v("给自己投一票")]),e._v(" "),a("li",[e._v("然后给集群中每一个节点发送拉票消息")])]),e._v(" "),a("p",[e._v("拉票信息中携带的数据：")]),e._v(" "),a("ol",[a("li",[e._v("Term ID")]),e._v(" "),a("li",[e._v("Last Log Term ID")]),e._v(" "),a("li",[e._v("Last Log Index")])]),e._v(" "),a("p",[e._v("当长时间没有 Leader 给自己发消息时，Follower 会认为此时没有 Leader，王侯将相宁有种乎？这次我当Leader！此 Follower 就成为 Candidate，给其他的 Follower 发送拉票请求。其他的 Follower 会根据上面的投票规则选择是否给此 Candidate 投票。")]),e._v(" "),a("p",[e._v("万一有一个 Follower 通过选举成为 Leader，那么它会每一个周期给所有 Follower 发送心跳，告诉他们老大还在，你们不要太猖狂。")]),e._v(" "),a("p",[e._v("需要注意的是，候选者会拒绝所有其他候选者的拉票请求，但是如果收到 Leader 的心跳请求，那么此候选者会成为该 Leader 的 Follower")]),e._v(" "),a("p",[e._v("同时，你应该也猜到了 Follower 的 timeout 时间为啥是随机的")]),e._v(" "),a("blockquote",[a("p",[e._v("由于 Candidate 不会同意其他 Candidate 的拉票，如果所有 Follower 的 timeout 时间是一致的，那么大概率同时成为 Candidate，会造成多次选举都无法选举出 Leader 的情况。")])]),e._v(" "),a("h3",{attrs:{id:"_4-3-leader-领导者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-leader-领导者"}},[e._v("#")]),e._v(" 4.3 Leader 领导者")]),e._v(" "),a("p",[e._v("当一个 Candidate 成为 Leader 时后，会向所有节点发送属于 Leader 的心跳，这个心跳可以让 Candidate 变成 Follower，同时将所有 Follower 的 Timeout 刷新。并且心跳是定时发送的。")]),e._v(" "),a("p",[e._v("当 Leader 收到 来自客户端的请求后，会进行两阶段 ：")]),e._v(" "),a("ol",[a("li",[e._v("将请求（或者说数据）放入日志中，向所有 Follower 发送这个日志")]),e._v(" "),a("li",[e._v("当超过半数的 Follower 同步日志之后，Leader 会将这条日志"),a("font",{attrs:{color:"green"}},[a("strong",[e._v("落盘")])]),e._v("，并通知 Follower 进行落盘。")],1)]),e._v(" "),a("p",[e._v("当然了，我说 落盘 只是因为落盘容易理解，正确的说法是 ：交给状态机执行。")]),e._v(" "),a("p",[e._v("状态机执行的实际上就是这个系统的核心操作，比如 ：")]),e._v(" "),a("ol",[a("li",[e._v("文件系统的状态机执行的是将用户提交的文件保存到本地")]),e._v(" "),a("li",[e._v("银行系统的状态机执行的操作是将用户存的钱保存到数据库")])]),e._v(" "),a("p",[e._v("所以说，根据 Raft 算法实现系统时，自定义日志后还要自定义状态机。")]),e._v(" "),a("h2",{attrs:{id:"_5-leader-的选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-leader-的选举"}},[e._v("#")]),e._v(" 5. Leader 的选举")]),e._v(" "),a("p",[e._v("最初所有的节点都是 Follower，并且每一个节点都会生成一个随机等待时间，在这个等待时间结束之前还没有 Leader 给我发来消息，那我就变成 Candidate 向其他节点拉票。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/20231103160906.png",alt:"等待时间未结束"}})]),e._v(" "),a("p",[e._v("图中的 S1、S2...代表节点名，圆圈内部的数字 1 代表任期号（Term）。圆圈外面那层灰色进度条代表随即等待时间。")]),e._v(" "),a("p",[e._v("可以看到 S1 的等待时间已经快结束了。等待时间一旦结束，S1 会成为 Candidate，并且：")]),e._v(" "),a("ul",[a("li",[e._v("将自己的任期加一")]),e._v(" "),a("li",[e._v("给自己投一票，再向其他节点拉票，发送 RequestVote RPC")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/20231103161206.png",alt:"S1拉票"}})]),e._v(" "),a("p",[e._v("如图，S1 的任期变为 2，内部多了 一个实心黑圈和四个空心白圈，代表现在只有一票，是自己投的。")]),e._v(" "),a("p",[e._v("S2、S3、S4、S5 在收到这个拉票请求后，由于此时没有日志，那么只比较任期 Term ID。很明显 S1 更胜一筹。")]),e._v(" "),a("p",[e._v("那么不出意外的情况下， S2、S3、S4、S5 都支持 S1 当选 Leader。")]),e._v(" "),a("p",[e._v("但是不出意外的话要出意外了：")]),e._v(" "),a("p",[e._v("S3、S4、S5 都支持 S1 当选 Leader。只有 S2 不支持，为什么？因为 S2 的等待时间结束了，它也要成为 Candidate 进行拉票了。")]),e._v(" "),a("h2",{attrs:{id:"_6-投票分裂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-投票分裂"}},[e._v("#")]),e._v(" 6. 投票分裂")]),e._v(" "),a("p",[e._v("其他节点在接收到 S1 发送的拉票请求后，发现 S1 的 Term 比自己大，于是欣然同意 S1，并将自己的任期与 S1 进行同步。")]),e._v(" "),a("p",[e._v("但是！S2 成为了 Candidate，Term 变成2，Candidate 会拒绝其他 Candidate 的拉票，所以 S2 拒绝了 S1 的拉票：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20231103162943273.png",alt:"出现投票分裂情况"}})]),e._v(" "),a("p",[e._v("图中的 RequestVote RPC 挺多挺乱的，一共有两种消息，")]),e._v(" "),a("ol",[a("li",[e._v("一种是 同意/拒绝S1拉票 的请求。")]),e._v(" "),a("li",[e._v("一种是 S2 向其他节点发送的拉票请求。")])]),e._v(" "),a("p",[e._v("那么 S2 发送的拉票请求一定不会成功，因为其他节点已经同意 S1 当选 Leader 了，不会重复投票。")]),e._v(" "),a("p",[e._v("后来 S1 已经成为了 Leader，会发送心跳告知其他节点 ：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20231103163434532.png",alt:"S1成为Leader"}})]),e._v(" "),a("p",[e._v("当 S1 的 Leader 心跳到达其他节点后，他们就都变为 Follower。")]),e._v(" "),a("p",[e._v("需要注意的是，每一次接收到来自 Leader 的心跳，Follower 都必须更新自己的等待时间，重新等。但是如果在等待时间结束的时候还没有 Leader 的心跳，说明它死了，我可取而代之。")]),e._v(" "),a("h2",{attrs:{id:"_7-日志复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-日志复制"}},[e._v("#")]),e._v(" 7. 日志复制")]),e._v(" "),a("p",[e._v("虽然说是日志，其实在我们的实现中复制的也可以是数据，所以这一部分很重要。")]),e._v(" "),a("p",[e._v("在前面的叙述中，S1 已经当选了 Leader，这时它接收到了用户产生的数据，如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20231103164846457.png",alt:"S1日志"}})]),e._v(" "),a("p",[e._v("S1 现在有三条日志，日志的 Term ID = 2，代表这条日志产生时的任期为2。为什么是虚线呢？")]),e._v(" "),a("p",[e._v("我们可以将虚线日志看作为 还存在于内存中的数据，在半数节点统一内存中的数据后才能刷新到磁盘。")]),e._v(" "),a("p",[e._v("是不是跟 Zookeeper 一样。")]),e._v(" "),a("p",[e._v("那么日志同步就是 Leader 中产生的日志，发送给 Follower 去同步，如果同步成功就给 Leader 返回成功。")]),e._v(" "),a("p",[e._v("如果一个日志同步请求得到半数以上的 Follower 的支持，这个日志将会被写入状态机（写入磁盘）。Leader 将日志写入磁盘后也会通知 Follower 让他们将此条日志写到磁盘。")]),e._v(" "),a("p",[e._v("这里需要介绍两个变量 ：这两个变量要用于日志同步。")]),e._v(" "),a("ol",[a("li",[e._v("next index ：下一个需要同步的日志下标。")]),e._v(" "),a("li",[e._v("match index ：可以写入磁盘的最大下标。")])]),e._v(" "),a("p",[e._v("在图里的表现形式是 ：箭头是 next index；圆点是 match index")]),e._v(" "),a("p",[e._v("补充到现在，来看看Leader 发送给 Follower 的请求中都有哪些数据？")]),e._v(" "),a("ol",[a("li",[e._v("Leader 的 next index 位置的日志")]),e._v(" "),a("li",[e._v("Leader 的 match index，表示所有 Follower 可以将 match index 前的数据都写入磁盘。")])]),e._v(" "),a("p",[e._v("复制 Index 为 1 的日志 ：可以看到 S2、S3、S4、S5 都应用了这条日志。那么 Leader 接收到所有返回后，将会把 Index 为 1 的日志写入磁盘。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20231103165358599.png",alt:"复制 Index 为 1 的日志"}})]),e._v(" "),a("p",[e._v("由于超半数节点都同意将 index = 1的日志同步进内存。于是S1下一条消息就是")]),e._v(" "),a("ul",[a("li",[e._v("next index ：2")]),e._v(" "),a("li",[e._v("match index ：1")])]),e._v(" "),a("p",[e._v("其他节点在接收到这个消息时，如果同意，会将 next index 日志复制到内存中，match index 的日志写入磁盘中。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20231103170615154.png",alt:"image-20231103170615154"}})]),e._v(" "),a("p",[e._v("当出现新的节点进入集群时，Leader 会发送很多个 RPC 请求给它进行日志同步。")]),e._v(" "),a("h2",{attrs:{id:"_8-保证数据安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-保证数据安全"}},[e._v("#")]),e._v(" 8. 保证数据安全")]),e._v(" "),a("p",[e._v("上面说 Raft 算法是以 Leader 为主的强一致性算法。那么如果出现以下情况：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20231103181717099.png",alt:"image-20231103181717099"}})]),e._v(" "),a("p",[e._v("先说一下是什么情况吧，在 S1、S2、S3、S4 开心愉悦的工作期间，S5一直处于宕机状态，所以 S5 一条日志都没有。但是此时 S1 宕机了，万一让 S5 当上了 Leader，S5 肯定要进行数据同步，难道让它将其他节点的数据全部清除吗？")]),e._v(" "),a("p",[e._v("肯定不可以，别说让它同步数据了，就连 Leader 都不能让它当。还记得之前说的 “投票”吗？")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://typorehwf.oss-cn-chengdu.aliyuncs.com/image-20231103182058362.png",alt:"image-20231103182058362"}})]),e._v(" "),a("p",[e._v("S5 苏醒之后，首先它的 Term 就一定没有其他节点大，根本没有它当 Leader 的机会。")]),e._v(" "),a("p",[e._v("其次，就算你的 Term 侥幸跟其他节点一样大了，但是你日志的Term没有其他节点大，其他节点根本不会投你啊。")]),e._v(" "),a("p",[e._v("所以其他节点都不会搭理 S5 的投票，当 S2、S3、S4 其中一个节点超时，就会加任期然后拉票然后当上Leader。")])])}),[],!1,null,null,null);a.default=_.exports}}]);